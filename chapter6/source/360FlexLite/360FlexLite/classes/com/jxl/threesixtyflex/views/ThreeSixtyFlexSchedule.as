import mx.utils.Delegate;import com.jxl.shuriken.core.UIComponent;import com.jxl.shuriken.controls.LinkButton;import com.jxl.shuriken.events.Event;import com.jxl.threesixtyflex.controller.CommandRegistry;import com.jxl.threesixtyflex.events.GetScheduleByDayEvent;import com.jxl.threesixtyflex.model.ModelLocator;import com.jxl.threesixtyflex.views.TodayView;import com.jxl.threesixtyflex.views.SettingsScreen;import com.jxl.threesixtyflex.events.CheckForUpdateEvent;import com.jxl.threesixtyflex.callbacks.CheckForUpdateCallback;import com.jxl.threesixtyflex.views.Alert;import com.jxl.shuriken.events.Callback;import com.jxl.threesixtyflex.views.MainView;class com.jxl.threesixtyflex.views.ThreeSixtyFlexSchedule extends UIComponent{	public static var SYMBOL_NAME:String = "com.jxl.threesixtyflex.views.ThreeSixtyFlexSchedule";	public static var SYMBOL_ACTIVITY:String = "BlueLoadingAnimation";		private static var EVENT_ALERT_CLOSED:String = "alertClosed";		public static var loop_mc:MovieClip;		private var __activity_mc:MovieClip;	private var __info_txt:TextField;	private var __ok_lb:LinkButton;	private var __todayView:TodayView;	private var __settingsScreen:SettingsScreen;	private var __loop_mc:MovieClip;	private var __lastView:Function;	private var __alert:Alert;	private var __alertCallback:Callback;	private var __mainView:MainView;	private var __cacheList:Function;		public function ThreeSixtyFlexSchedule()	{		_global.phpURL = "http://www.jessewarden.com/360Flex/FrontController.php";		_global.ThreeSixtyFlexSO = "threesixtyflex";		_global.pixelTF = _root.pixelFont_txt.getTextFormat();		_global.pixelBoldTF = _root.pixelFontBold_txt.getTextFormat();	}		private function createChildren():Void	{		if(__loop_mc == null)		{			__loop_mc = createEmptyMovieClip("__loop_mc", getNextHighestDepth());			ThreeSixtyFlexSchedule.loop_mc = __loop_mc;		}				onGoToMain();	}		private function getTodaysSchedule():Void	{		var day:Number = new Date().getDate();		getSchedule(day);	}		private function getSchedule(day:Number):Void	{		var event:GetScheduleByDayEvent = new GetScheduleByDayEvent(GetScheduleByDayEvent.GET_SCHEDULE_BY_DAY,																	this, 																	onGotTodaysSchedule);		event.day = day;				destroyViews();		var theDay:String;		switch(day)		{			case 5:				theDay = "Monday";				break;							case 6:				theDay = "Tuesday";				break;							case 7:				theDay = "Wednesday";				break;		}		showActivity("Getting " + theDay + "'s schedule...");				CommandRegistry.getInstance().dispatchEvent(event);	}		// progress either a string or a boolean	private function onGotTodaysSchedule(progress:Object):Void	{		//trace("------------------");		//trace("ThreeSixtyFlexSchedule::onGotTodaysSchedule");		//trace("progress: " + progress);		//trace("typeof: " + typeof(progress));		//trace("progress instanceof String: " + (progress instanceof String));		//trace("progress instanceof Boolean: " + (progress instanceof Boolean));				// TODO: assumes success, need to put error checking in		if(typeof(progress) == "string")		{			showActivity(String(progress));		}		else if(typeof(progress) == "boolean")		{			showTodaysSchedule();		}	}		private function showTodaysSchedule():Void	{		hideActivity(true);		__lastView = TodayView;				if(__todayView == null)		{			__todayView = TodayView(createComponent(TodayView, "__todayView"));			__todayView.setSize(__width, __height);			__todayView.setMainCallback(this, onGoToMain);			__todayView.setEvents(ModelLocator.getInstance().selectedDay, ModelLocator.getInstance().events);		}	}		private function onGoToMain(event:Event):Void	{		destroyViews();				__lastView = MainView;				if(__mainView == null)		{			__mainView = MainView(createComponent(MainView, "__mainView"));			__mainView.setSize(__width, __height);			__mainView.setDayCallback(this, onDayClicked);			__mainView.setSettingsCallback(this, onGoToSettings);		}	}		private function onDayClicked(event:Event):Void	{		trace("--------------------");		trace("ThreeSixtyFlexSchedule::onDayClicked, event.type: " + event.type);		var day:Number;		switch(event.type)		{			case MainView.EVENT_MON:				day = 5;				break;						case MainView.EVENT_TUE:				day = 6;				break;						case MainView.EVENT_WED:				day = 7;				break;		}		getSchedule(day);	}		private function onGoToSettings(event:Event):Void	{		destroyViews();				if(__settingsScreen == null)		{			__settingsScreen = SettingsScreen(createComponent(SettingsScreen, "__settingsScreen"));			__settingsScreen.setSize(__width, __height);			__settingsScreen.setUpdateCallback(this, onCheckUpdate);			__settingsScreen.setBackCallback(this, onBack);			__settingsScreen.setDeleteCallback(this, onDeleteCache);		}	}		private function onCheckUpdate(event:Event):Void	{		var event:CheckForUpdateEvent = new CheckForUpdateEvent(CheckForUpdateEvent.CHECK,																	this, 																	onCheckUpdateDone);		destroyViews();		showActivity("Checking for updates...");		CommandRegistry.getInstance().dispatchEvent(event);	}		private function onCheckUpdateDone(callback:CheckForUpdateCallback):Void	{		hideActivity(true);				var str:String = "";		if(callback.failed == false)		{			if(callback.newerVersionAvailable == false)			{				str = "No update available.\nYou have the\nlatest version.";			}			else			{				str = "An update is available!\nPlease visit:\n\n";				str += callback.updateURL;				str += "\n";			}		}		else		{			str = "The update server is not responding.\nPlease try again later.";		}		// FIXME		//showAlert(str, this, onGoToMain);		showAlert(str, this, onBack);	}		private function onBack(event:Event):Void	{		destroyViews();				switch(__lastView)		{			case TodayView:				showTodaysSchedule();				break;							default:				onGoToMain();				break;		}	}		private function onDeleteCache(event:Event):Void	{		destroyViews();				if(System.capabilities.isDebugger == false)		{			if(__cacheList == null) __cacheList = Delegate.create(this, onCacheReady);			SharedObject.removeListener(_global.ThreeSixtyFlexSO);			SharedObject.addListener(_global.ThreeSixtyFlexSO, __cacheList);			var so:SharedObject = SharedObject.getLocal(_global.ThreeSixtyFlexSO);		}		else		{			var so:SharedObject = SharedObject.getLocal(_global.ThreeSixtyFlexSO);			onCacheReady(so);		}	}		private function onCacheReady(so:SharedObject):Void	{		so.clear();		showAlert("All events saved\non your device\nhave been deleted.", this, onGoToMain);	}		// Helper Methods	private function showAlert(msg:String, scope:Object, callback:Function):Void	{		if(__alert == null)		{			__alertCallback = new Callback(scope, callback);			__alert = Alert(createComponent(Alert, "__alert"));			__alert.setOkCallback(this, onCloseAlert);			__alert.setSize(__width, __height);			__alert.setMessage(msg);		}	}		private function onCloseAlert(event:Event):Void	{		__alert.removeMovieClip();		delete __alert;		__alertCallback.dispatch(new Event(EVENT_ALERT_CLOSED, this));		delete __alertCallback;	}		private function showActivity(p_msg:String, p_error:Boolean, p_func:Function):Void	{		if(__activity_mc == null)		{			__activity_mc = attachMovie(SYMBOL_ACTIVITY, "__activity_mc", getNextHighestDepth());		}				if(p_msg != null)		{			if(__info_txt == null)			{				__info_txt = createLabel("__info_txt");				var fmt:TextFormat = __info_txt.getTextFormat();				fmt.align = TextField.ALIGN_CENTER;				fmt.size = 16;				fmt.color = 0x339933;				fmt.font = "_sans";				__info_txt.autoSize = "center";				__info_txt.wordWrap = true;				__info_txt.multiline = true;				__info_txt.setTextFormat(fmt);				__info_txt.setNewTextFormat(fmt);				__info_txt._width = 176;			}						__info_txt.text = p_msg;			__info_txt.move((__width / 2) - (__info_txt._width / 2), (__height / 2) - (__info_txt._height / 2));						__activity_mc._x = (__width / 2) - (__activity_mc._width / 2);			__activity_mc._y = __info_txt._y - __activity_mc._height;		}				if(p_error == true)		{			if(__ok_lb == null)			{				__ok_lb = LinkButton(createComponent(LinkButton, "__settings_lb"));				__ok_lb.setReleaseCallback(this, p_func);				__ok_lb.textField.autoSize = "left";				__ok_lb.textField.textColor = 0x0033CC;				__ok_lb.label = "OK";				__ok_lb.setSize(__ok_lb.textField.textWidth + 4, __ok_lb.height);			}						__ok_lb.move((__width / 2) - (__ok_lb.width / 2), __activity_mc._y + __activity_mc._height + 4);		}	}		private function hideActivity(p_removeMsg:Boolean):Void	{		if(__activity_mc != null)		{			__activity_mc.removeMovieClip();			delete __activity_mc;		}				if(p_removeMsg == true)		{			if(__info_txt != null)			{				__info_txt.removeTextField();				delete __info_txt;			}						if(__ok_lb != null)			{				__ok_lb.removeMovieClip();				delete __ok_lb;			}		}	}		private function destroyViews():Void	{		if(__mainView != null)		{			__mainView.removeMovieClip();			delete __mainView;		}				if(__todayView != null)		{			__todayView.removeMovieClip();			delete __todayView;		}				if(__settingsScreen != null)		{			__settingsScreen.removeMovieClip();			delete __settingsScreen;		}	}}
/* Copyright (c) 2008 Company name, All Rights Reserved  @author   Elad Elrom @contact  elad.ny at gmail.com @project  project @internal  */package com.elad.TDDPureMVC.controller.services {    import com.elad.TDDPureMVC.model.FeedsPanelViewerProxy;    import com.elad.TDDPureMVC.model.vo.FeedVO;    import com.elad.TDDPureMVC.model.vo.FeedsCollectionVO;        import mx.controls.Alert;    import mx.rpc.IResponder;    import mx.rpc.events.FaultEvent;    import mx.rpc.events.ResultEvent;        import org.puremvc.as3.interfaces.ICommand;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.command.SimpleCommand;    /**     *     * Defines the associated <code>ICommand</code> implementation for      * the user gesture.     *     * <p>     * Commands may retrieve and interact with Proxies, send Notifications,      * execute other Commands, and are often used to orchestrate complex or system-wide      * activities such as application startup and shutdown.      * They are the home of your application’s Business Logic.     * </p>     *     * @see org.puremvc.as3.patterns.command.SimpleCommand     * @see org.puremvc.as3.interfaces.ICommand     *     */    public final class ReadAdobeFeedsCommand extends SimpleCommand    {        /**		 *		 * Method to Notification triggers the <code>ReadAdobeFeedsCommand</code>		 * command object which registers the specific proxy, and the specific mediator.		 * 		 * <ul>		 * 	<li>Create and register the proxy		 *  <li>Create and register mediator with the stage instance as an argument		 * </ul>		 *		 * @param INotification	Notification trigger contract		 * 		 * @see	org.puremvc.as3.interfaces.INotification		 *		 */                override public function execute(note:INotification):void            {						var feedsProxy:FeedsPanelViewerProxy = facade.retrieveProxy(FeedsPanelViewerProxy.NAME) as FeedsPanelViewerProxy;			feedsProxy.getAdobeFeeds();        }           }}